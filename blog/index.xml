<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on Programming Languages</title>
    <link>https://adelehedrick.github.io/Fall-2016-CSCI-3055U/blog/</link>
    <description>Recent content in Blogs on Programming Languages</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 21 Sep 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://adelehedrick.github.io/Fall-2016-CSCI-3055U/blog/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>A Little I/O in Clojure</title>
      <link>https://adelehedrick.github.io/Fall-2016-CSCI-3055U/blog/2016/09/21/little-io-clojure/</link>
      <pubDate>Wed, 21 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://adelehedrick.github.io/Fall-2016-CSCI-3055U/blog/2016/09/21/little-io-clojure/</guid>
      <description>

&lt;h2 id=&#34;before-we-begin&#34;&gt;Before We Begin&lt;/h2&gt;

&lt;p&gt;Make sure that you have the Clojure JAR handy and know how to use it! If you don&amp;rsquo;t remember, then check out this &lt;a href=&#34;https://adelehedrick.github.io/Fall-2016-CSCI-3055U/blog/2016/09/18/getting-started-clojure/&#34;&gt;post&lt;/a&gt; to get yourself started!&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m assuming you understand variable assignment and basic functions in Clojure by now, but anything I do here I will be sure to explain in detail to help reinforce your understanding.&lt;/p&gt;

&lt;p&gt;Dr. Ken Pu has graciously provided some extremely relevant data for everyone to play with. So relevant that it might change your undergraduate lives at this very moment. He has provided&amp;ndash;&lt;em&gt;drum roll please&lt;/em&gt;&amp;ndash;&lt;strong&gt;the current listing of classes and rooms for this semester!&lt;/strong&gt; The relevance might elude you, but after your first assignment, you will see the value in this data!&lt;/p&gt;

&lt;h3 id=&#34;step-1-find-a-happy-place&#34;&gt;Step 1. Find a Happy Place&lt;/h3&gt;

&lt;p&gt;Find a happy place to put the files for this activity and make sure you know the path from the current directory to your Clojure JAR file. Better yet, why don&amp;rsquo;t you copy that JAR file into your current directory.&lt;/p&gt;

&lt;h3 id=&#34;step-2-download-the-data&#34;&gt;Step 2. Download the Data&lt;/h3&gt;

&lt;p&gt;Open up a terminal window for your current directory and download the file with a &lt;code&gt;wget&lt;/code&gt;./{{ .Get 0 }}&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wget {{ .Site.BaseURL }}/files/csci3055u-a1.txt
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Your First Clojure REPL</title>
      <link>https://adelehedrick.github.io/Fall-2016-CSCI-3055U/blog/2016/09/19/first-clojure-repl/</link>
      <pubDate>Mon, 19 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://adelehedrick.github.io/Fall-2016-CSCI-3055U/blog/2016/09/19/first-clojure-repl/</guid>
      <description>

&lt;h2 id=&#34;before-we-begin&#34;&gt;Before We Begin&lt;/h2&gt;

&lt;p&gt;Do you have the Clojure JAR? If not check out the &lt;a href=&#34;https://adelehedrick.github.io/Fall-2016-CSCI-3055U/blog/2016/09/18/getting-started-clojure/&#34;&gt;Setting Up Clojure&lt;/a&gt; post&lt;/p&gt;

&lt;h2 id=&#34;your-first-clojure-repl&#34;&gt;Your First Clojure REPL&lt;/h2&gt;

&lt;p&gt;I like to think of the read-eval-print loop (REPL) as the &lt;em&gt;interactive programming&lt;/em&gt; mode of a language.&lt;/p&gt;

&lt;h3 id=&#34;step-1-find-your-clojure-jar&#34;&gt;Step 1. Find your Clojure JAR&lt;/h3&gt;

&lt;p&gt;First open a terminal window and navigate to where your Clojure JAR is located.&lt;/p&gt;

&lt;h3 id=&#34;step-2-run-the-main-method&#34;&gt;Step 2. Run the main method!&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;java -cp clojure-1.8.0.jar clojure.main
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You will now see that you have a new prompt that looks like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;user=&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You are now ready to get your Clojure on! When starting a new language, it is good luck to do the typical &amp;ldquo;Hello World&amp;rdquo;. To do this, we will use the &lt;code&gt;println&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;Type the following Clojure command to bring yourself lots of good luck with Clojure:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(println &amp;quot;Hello World&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To leave the REPL, you just need to use &lt;code&gt;CTRL + D&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Your First Leiningen REPL</title>
      <link>https://adelehedrick.github.io/Fall-2016-CSCI-3055U/blog/2016/09/19/first-lein-repl/</link>
      <pubDate>Mon, 19 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://adelehedrick.github.io/Fall-2016-CSCI-3055U/blog/2016/09/19/first-lein-repl/</guid>
      <description>

&lt;h2 id=&#34;before-we-begin&#34;&gt;Before We Begin&lt;/h2&gt;

&lt;p&gt;Have you installed Leiningen? It is a requirement of running the lein repl! If you have no idea what I am saying you can head on over to the &lt;a href=&#34;https://adelehedrick.github.io/Fall-2016-CSCI-3055U/blog/2016/09/18/setting-up-lein/&#34;&gt;Setting Up Leiningen&lt;/a&gt; post&lt;/p&gt;

&lt;h2 id=&#34;your-first-lein-repl&#34;&gt;Your First lein REPL&lt;/h2&gt;

&lt;p&gt;I like to think of the read-eval-print loop (REPL) as the &lt;em&gt;interactive programming&lt;/em&gt; mode of a language. The first time you create a REPL through lein, it will download any extra files it needs.&lt;/p&gt;

&lt;p&gt;Open up one now in your terminal window with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;lein repl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You will now see that you have a new prompt that looks like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;user=&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You are now ready to get your Clojure on! When starting a new language, it is good luck to do the typical &amp;ldquo;Hello World&amp;rdquo;. To do this, we will use the &lt;code&gt;println&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;Type the following Clojure command to bring yourself lots of good luck with Clojure:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(println &amp;quot;Hello World&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To leave the REPL, you just need to use &lt;code&gt;CTRL + D&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Getting Started with Clojure</title>
      <link>https://adelehedrick.github.io/Fall-2016-CSCI-3055U/blog/2016/09/18/getting-started-clojure/</link>
      <pubDate>Sun, 18 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://adelehedrick.github.io/Fall-2016-CSCI-3055U/blog/2016/09/18/getting-started-clojure/</guid>
      <description>

&lt;h2 id=&#34;before-we-begin&#34;&gt;Before We Begin&lt;/h2&gt;

&lt;p&gt;This guide will be for setting up your environment in a Linux OS, I&amp;rsquo;m currently using Ubuntu. You will need Java version 1.6 or later, which is recommended by everything that I have read so far.&lt;/p&gt;

&lt;p&gt;To check your Java version just open up a terminal and type:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;java -version
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you are probably thinking &amp;ldquo;why do we need Java? I thought we are programming in Clojure?&amp;rdquo; To answer your unasked question, the Clojure code you write will be compiled by the Clojure &lt;em&gt;compiler&lt;/em&gt; to create Java Virtual Machine (JVM) bytecode. The Clojure compiler&amp;ndash;that we will get to later on&amp;ndash;is actually an executable JAR file, hence the need for Java.&lt;/p&gt;

&lt;h2 id=&#34;get-clojure-up-running&#34;&gt;Get Clojure Up &amp;amp; Running&lt;/h2&gt;

&lt;h3 id=&#34;step-1-download-clojure-zip&#34;&gt;Step 1. Download Clojure Zip&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s start off by opening up a terminal, and navigating to a location you want the JAR. Once there use the &lt;code&gt;wget&lt;/code&gt; command to download the zip folder:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wget http://repo1.maven.org/maven2/org/clojure/clojure/1.8.0/clojure-1.8.0.zip
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;step-2-unzip&#34;&gt;Step 2. Unzip&lt;/h3&gt;

&lt;p&gt;Unzip the folder to current directory.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;unzip clojure-1.8.0.zip
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;step-3-move-the-jar-into-the-current-directory&#34;&gt;Step 3. Move the JAR into the Current Directory&lt;/h3&gt;

&lt;p&gt;If you enter &lt;code&gt;ls&lt;/code&gt; you will find your new &amp;lsquo;clojure-1.8.0&amp;rsquo; folder, and inside it is the &amp;lsquo;clojure-1.8.0.jar&amp;rsquo; that we want. Let&amp;rsquo;s pull that JAR out of its directory and bring it into the current directory.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mv clojure-1.8.0/clojure-1.8.0.jar ./
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;step-4-test-with-a-repl&#34;&gt;Step 4. Test with a REPL&lt;/h3&gt;

&lt;p&gt;I go into more detail about the REPL in this &lt;a href=&#34;https://adelehedrick.github.io/Fall-2016-CSCI-3055U/blog/2016/09/19/first-clojure-repl/&#34;&gt;post&lt;/a&gt;, but for now just do these short steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Enter &lt;code&gt;java -cp clojure-1.8.0.jar clojure.main&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;You are now in the Clojure REPL. Try &lt;code&gt;(+ 1 3)&lt;/code&gt; and see if you get 4&lt;/li&gt;
&lt;li&gt;Exit out of the REPL by typing &lt;code&gt;CTRL + D&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;step-4-run-a-clojure-script&#34;&gt;Step 4. Run a Clojure Script&lt;/h3&gt;

&lt;p&gt;REPLs are nice, but but what if you want to code offline and then run it? Let&amp;rsquo;s quickly do that!&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Still in the same terminal window create a new Clojure file with &lt;code&gt;gedit hello.clj&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;In the file enter &lt;code&gt;(println &amp;quot;Hello World!&amp;quot;)&lt;/code&gt; then save and close the file&lt;/li&gt;
&lt;li&gt;Back in your terminal window you are going to run the same command as you did to start the Clojure REPL, but now you are going to provide it with a command line argument of the file name of the script you just wrote: &lt;code&gt;java -cp clojure-1.8.0.jar clojure.main hello.clj&lt;/code&gt;. If you didn&amp;rsquo;t get the expected output of &lt;code&gt;Hello World!&lt;/code&gt; then something went wrong!&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;step-5-break-the-script&#34;&gt;Step 5. Break the Script&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s take a quick look at what happens when there is a bug in your Clojure code. Being able to read/write code is very important, but so is being able to read &lt;em&gt;errors&lt;/em&gt;!&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open up the hello.clj again with &lt;code&gt;gedit hello.clj&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Change &lt;code&gt;println&lt;/code&gt; to something else (e.g. &lt;code&gt;printlny&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Now run the script again! &lt;code&gt;java -cp clojure-1.8.0.jar clojure.main hello.clj&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Errors!!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Exception in thread &amp;quot;main&amp;quot; java.lang.RuntimeException: Unable to resolve symbol: printlny in this context, compiling:(/home/delio/clojure_play/hello.clj:1:1)
	at clojure.lang.Compiler.analyze(Compiler.java:6688)
	at clojure.lang.Compiler.analyze(Compiler.java:6625)
	at clojure.lang.Compiler$InvokeExpr.parse(Compiler.java:3766)
	at clojure.lang.Compiler.analyzeSeq(Compiler.java:6870)
	at clojure.lang.Compiler.analyze(Compiler.java:6669)
	at clojure.lang.Compiler.analyze(Compiler.java:6625)
	at clojure.lang.Compiler$BodyExpr$Parser.parse(Compiler.java:6001)
	at clojure.lang.Compiler$FnMethod.parse(Compiler.java:5380)
	at clojure.lang.Compiler$FnExpr.parse(Compiler.java:3972)
	at clojure.lang.Compiler.analyzeSeq(Compiler.java:6866)
	at clojure.lang.Compiler.analyze(Compiler.java:6669)
	at clojure.lang.Compiler.eval(Compiler.java:6924)
	at clojure.lang.Compiler.load(Compiler.java:7379)
	at clojure.lang.Compiler.loadFile(Compiler.java:7317)
	at clojure.main$load_script.invokeStatic(main.clj:275)
	at clojure.main$script_opt.invokeStatic(main.clj:335)
	at clojure.main$script_opt.invoke(main.clj:330)
	at clojure.main$main.invokeStatic(main.clj:421)
	at clojure.main$main.doInvoke(main.clj:384)
	at clojure.lang.RestFn.invoke(RestFn.java:408)
	at clojure.lang.Var.invoke(Var.java:379)
	at clojure.lang.AFn.applyToHelper(AFn.java:154)
	at clojure.lang.Var.applyTo(Var.java:700)
	at clojure.main.main(main.java:37)
Caused by: java.lang.RuntimeException: Unable to resolve symbol: printlny in this context
	at clojure.lang.Util.runtimeException(Util.java:221)
	at clojure.lang.Compiler.resolveIn(Compiler.java:7164)
	at clojure.lang.Compiler.resolve(Compiler.java:7108)
	at clojure.lang.Compiler.analyzeSymbol(Compiler.java:7069)
	at clojure.lang.Compiler.analyze(Compiler.java:6648)
	... 23 more
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is an epic output! This stack trace shows you exactly where in the Clojure compiler JAR everything broke down, but most importantly it tells you where in your Clojure script it broke!&lt;/p&gt;

&lt;p&gt;Look at the first line a little more closely:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Exception in thread &amp;quot;main&amp;quot; java.lang.RuntimeException: Unable to resolve symbol: printlny in this context, compiling:(/home/delio/clojure_play/hello.clj:1:1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This tells me a lot! &lt;code&gt;Unable to resolve symbol: printly&lt;/code&gt; tells me that the compiler encountered  something&amp;ndash;in this case &amp;lsquo;printly&amp;rsquo;&amp;ndash;that is completely unknown, and therefore it can&amp;rsquo;t be translated to JVM bytecode! The error then tells me where it encountered the problem by showing the file name, line number and column; &lt;code&gt;(/home/delio/clojure_play/hello.clj:1:1)&lt;/code&gt;. Just to be clear, the first &amp;lsquo;1&amp;rsquo; is the line number, and the second is the column number.&lt;/p&gt;

&lt;h2 id=&#34;moving-forward&#34;&gt;Moving Forward&lt;/h2&gt;

&lt;p&gt;Ready for more? Why don&amp;rsquo;t you head over to the &lt;a href=&#34;https://adelehedrick.github.io/Fall-2016-CSCI-3055U/blog/2016/09/21/little-io-clojure/&#34;&gt;post on input/output in Clojure&lt;/a&gt;!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Getting Started with Clojure</title>
      <link>https://adelehedrick.github.io/Fall-2016-CSCI-3055U/blog/2016/09/18/setting-up-clojure/</link>
      <pubDate>Sun, 18 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://adelehedrick.github.io/Fall-2016-CSCI-3055U/blog/2016/09/18/setting-up-clojure/</guid>
      <description>

&lt;h2 id=&#34;before-we-begin&#34;&gt;Before We Begin&lt;/h2&gt;

&lt;p&gt;This guide will be for setting up your environment in a Linux OS, I&amp;rsquo;m currently using Ubuntu. You will need Java version 1.6 or later, which is recommended by everything that I have read so far.&lt;/p&gt;

&lt;p&gt;To check your Java version just open up a terminal and type:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;java -version
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you are probably thinking &amp;ldquo;why do we need Java? I thought we are programming in Clojure?&amp;rdquo; To answer your unasked question, the Clojure code you write will be compiled by the Clojure &lt;em&gt;compiler&lt;/em&gt; to create Java Virtual Machine (JVM) bytecode. The Clojure compiler&amp;ndash;that we will get to later on&amp;ndash;is actually an executable JAR file, hence the need for Java.&lt;/p&gt;

&lt;h2 id=&#34;get-clojure-up-running&#34;&gt;Get Clojure Up &amp;amp; Running&lt;/h2&gt;

&lt;h3 id=&#34;step-1-download-clojure-zip&#34;&gt;Step 1. Download Clojure Zip&lt;/h3&gt;

&lt;p&gt;Download the zip folder from the &lt;a href=&#34;http://clojure.org/&#34;&gt;Clojure website&lt;/a&gt; by clicking on the big green &amp;ldquo;Download Clojure 1.8.0&amp;rdquo; button, or click on this &lt;a href=&#34;http://repo1.maven.org/maven2/org/clojure/clojure/1.8.0/clojure-1.8.0.zip&#34;&gt;link to the zip folder&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;step-2-find-the-jar&#34;&gt;Step 2. Find the JAR&lt;/h3&gt;

&lt;p&gt;Extract the zip folder and open the resulting folder. Inside you will find the &amp;ldquo;clojure-1.8.0.jar&amp;rdquo;&lt;/p&gt;

&lt;h3 id=&#34;step-3-find-a-home-for-the-jar&#34;&gt;Step 3. Find a home for the JAR&lt;/h3&gt;

&lt;p&gt;Find a nice home for your JAR where you wont forget it! Perhaps create a folder called &amp;ldquo;Clojure&amp;rdquo; in your home directory and then put it there?&lt;/p&gt;

&lt;h3 id=&#34;step-4-test-with-a-repl&#34;&gt;Step 4. Test with a REPL&lt;/h3&gt;

&lt;p&gt;I go into more detail about the REPL in this &lt;a href=&#34;https://adelehedrick.github.io/Fall-2016-CSCI-3055U/blog/2016/09/19/first-clojure-repl/&#34;&gt;post&lt;/a&gt;, but for now just do these short steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open terminal window and navigate to your Clojure JAR&lt;/li&gt;
&lt;li&gt;Enter &lt;code&gt;java -cp clojure-1.8.0.jar clojure.main&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;You are now in the Clojure REPL. Try &lt;code&gt;(+ 1 3)&lt;/code&gt; and see if you get 4&lt;/li&gt;
&lt;li&gt;Exit out of the REPL by typing &lt;code&gt;CTRL + D&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;step-4-run-a-clojure-script&#34;&gt;Step 4. Run a Clojure Script&lt;/h3&gt;

&lt;p&gt;REPLs are nice, but but what if you want to code offline and then run it? Let&amp;rsquo;s quickly do that!&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Still in the same terminal window create a new Clojure file with &lt;code&gt;gedit hello.clj&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;In the file enter &lt;code&gt;(println &amp;quot;Hello World!&amp;quot;)&lt;/code&gt; then save and close the file&lt;/li&gt;
&lt;li&gt;Back in your terminal window you are going to run the same command as you did to start the Clojure REPL, but now you are going to provide it with a command line argument of the filename of the script you just wrote: &lt;code&gt;java -cp clojure-1.8.0.jar clojure.main ./hello.clj&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;step-5-confirm-all-is-well&#34;&gt;Step 5. Confirm all is well&lt;/h3&gt;

&lt;p&gt;Just to make sure everything is good, let&amp;rsquo;s check the version of lein.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;lein -v
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You should receive an output similar to mine below (depending on your Java version).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; Leiningen 2.7.0 on Java 1.7.0_80 Java HotSpot(TM) 64-Bit Server VM
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;next-steps&#34;&gt;Next Steps&lt;/h2&gt;

&lt;p&gt;Now that you have Leiningen installed and the Clojure compiler downloaded, why don&amp;rsquo;t you start &lt;a href=&#34;https://adelehedrick.github.io/Fall-2016-CSCI-3055U/blog/2016/09/19/first-clojure-repl/&#34;&gt;your first Clojure REPL&lt;/a&gt;?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Setting Up Leiningen</title>
      <link>https://adelehedrick.github.io/Fall-2016-CSCI-3055U/blog/2016/09/18/setting-up-lein/</link>
      <pubDate>Sun, 18 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://adelehedrick.github.io/Fall-2016-CSCI-3055U/blog/2016/09/18/setting-up-lein/</guid>
      <description>

&lt;h2 id=&#34;before-we-begin&#34;&gt;Before We Begin&lt;/h2&gt;

&lt;p&gt;This guide will be for setting up your environment in a Linux OS, I&amp;rsquo;m currently using Ubuntu. You will need Java version 1.6 or later, which is recommended by everything that I have read so far.&lt;/p&gt;

&lt;p&gt;To check your Java version just open up a terminal and type:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;java -version
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To quote their &lt;a href=&#34;http://leiningen.org/&#34;&gt;website&lt;/a&gt;; Leiningen is &amp;ldquo;for automating Clojure projects without setting your hair on fire.&amp;rdquo; Leiningen will be helping us get Clojure running as well as manage any dependencies we use. Instructions are on their &lt;a href=&#34;http://leiningen.org/&#34;&gt;website&lt;/a&gt; for installing Leiningen, but they are not detailed enough for my liking, so I have made very thorough instructions.&lt;/p&gt;

&lt;h2 id=&#34;install-leiningen&#34;&gt;Install Leiningen&lt;/h2&gt;

&lt;h3 id=&#34;step-1-open-a-terminal-and-download-the-lein-script&#34;&gt;Step 1. Open a terminal and download the lein script&lt;/h3&gt;

&lt;p&gt;Download the script right from the source listed on the Leiningen &lt;a href=&#34;http://leiningen.org/&#34;&gt;website&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wget https://raw.githubusercontent.com/technomancy/leiningen/stable/bin/lein
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;step-2-change-ownership&#34;&gt;Step 2. Change ownership&lt;/h3&gt;

&lt;p&gt;Use chmod to change the &lt;em&gt;ownership&lt;/em&gt; of the lein bash file you just downloaded to allow for anyone to execute the file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;chmod a+x lein
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;step-3-move-lein&#34;&gt;Step 3. Move lein&lt;/h3&gt;

&lt;p&gt;Now move lein&amp;ndash;with super user privileges&amp;ndash;to your system&amp;rsquo;s executable path.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo mv lein /usr/bin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you are prompted to enter your password, do so and carry on.&lt;/p&gt;

&lt;h3 id=&#34;step-4-run-it&#34;&gt;Step 4. Run it&lt;/h3&gt;

&lt;p&gt;Now you will simply run &lt;em&gt;lein&lt;/em&gt; and it will download the self-install package. If you try to run lein without super user privileges, it might yell at you about firewall junk. Be sure to press &lt;code&gt;ENTER&lt;/code&gt; when it asks you to confirm this action.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo lein
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;step-5-confirm-all-is-well&#34;&gt;Step 5. Confirm all is well&lt;/h3&gt;

&lt;p&gt;Just to make sure everything is good, let&amp;rsquo;s check the version of lein.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;lein -v
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You should receive an output similar to mine below (depending on your Java version).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; Leiningen 2.7.0 on Java 1.7.0_80 Java HotSpot(TM) 64-Bit Server VM
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;next-steps&#34;&gt;Next Steps&lt;/h2&gt;

&lt;p&gt;Now that you have Leiningen installed and the Clojure compiler downloaded, why don&amp;rsquo;t you start &lt;a href=&#34;https://adelehedrick.github.io/Fall-2016-CSCI-3055U/blog/2016/09/19/first-lein-repl/&#34;&gt;your first Leiningen REPL&lt;/a&gt;?&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>