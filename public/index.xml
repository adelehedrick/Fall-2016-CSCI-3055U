<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming Languages</title>
    <link>https://adelehedrick.github.io/Fall-2016-CSCI-3055U/</link>
    <description>Recent content on Programming Languages</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 21 Sep 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://adelehedrick.github.io/Fall-2016-CSCI-3055U/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>A Little Input in Clojure</title>
      <link>https://adelehedrick.github.io/Fall-2016-CSCI-3055U/blog/2016/09/21/little-input-clojure/</link>
      <pubDate>Wed, 21 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://adelehedrick.github.io/Fall-2016-CSCI-3055U/blog/2016/09/21/little-input-clojure/</guid>
      <description>

&lt;h2 id=&#34;before-we-begin&#34;&gt;Before We Begin&lt;/h2&gt;

&lt;p&gt;Make sure that you have the Clojure JAR handy and know how to use it! If you don&amp;rsquo;t remember, then check out this &lt;a href=&#34;https://adelehedrick.github.io/Fall-2016-CSCI-3055U/blog/2016/09/18/getting-started-clojure/&#34;&gt;post&lt;/a&gt; to get yourself started!&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m assuming you understand binding, loops and basic functions in Clojure by now, but anything I do here I will be sure to explain in detail to help reinforce your understanding.&lt;/p&gt;

&lt;p&gt;Dr. Ken Pu has graciously provided some extremely relevant data for everyone to play with. So relevant that it might change your undergraduate lives at this very moment. He has provided&amp;ndash;&lt;em&gt;drum roll please&lt;/em&gt;&amp;ndash;&lt;strong&gt;the current listing of classes and rooms for this semester!&lt;/strong&gt; The relevance might elude you, but after your first assignment, you will see the value in this data!&lt;/p&gt;

&lt;h3 id=&#34;step-1-find-a-happy-place&#34;&gt;Step 1. Find a Happy Place&lt;/h3&gt;

&lt;p&gt;Find a happy place to put the files for this activity and make sure you know the path from the current directory to your Clojure JAR file. Better yet, why don&amp;rsquo;t you copy that JAR file into your current directory.&lt;/p&gt;

&lt;h3 id=&#34;step-2-download-the-data&#34;&gt;Step 2. Download the Data&lt;/h3&gt;

&lt;p&gt;Open up a terminal window for your current directory and download the file with a &lt;code&gt;wget&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wget https://adelehedrick.github.io/Fall-2016-CSCI-3055U/files/csci3055u-a1.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;step-3-create-a-clojure-file&#34;&gt;Step 3. Create a Clojure File&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gedit read_file.clj
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The next few steps will be from within this file you just created and opened.&lt;/p&gt;

&lt;h3 id=&#34;step-4-use-the-clojure-java-i-o-library&#34;&gt;Step 4. &amp;ldquo;Use&amp;rdquo; the Clojure Java I/O Library&lt;/h3&gt;

&lt;p&gt;Start by telling Clojure that you want to use the io library&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;use&lt;/span&gt; &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;#39;clojure.java.io&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;step-5-with-open-goodness&#34;&gt;Step 5. With-Open Goodness&lt;/h3&gt;

&lt;p&gt;As you know I/O comes with many risks. What if we lose connection to the file? What if the file is too big and we run out of memory? What if there is no file? That is why when doing I/O, you typically have to surround the block of code with a try-catch. You also need to &lt;em&gt;close&lt;/em&gt; the file when you are done with it! So many things to worry about with I/O.&lt;/p&gt;

&lt;p&gt;Thankfully, Clojure has provided us with the &lt;a href=&#34;https://clojuredocs.org/clojure.core/with-open&#34;&gt;with-open&lt;/a&gt; function which looks like this:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;use&lt;/span&gt; &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;#39;clojure.java.io&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #204a87&#34;&gt;with-open &lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&amp;lt;file&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;]&lt;/span&gt;
    &lt;span style=&#34;color: #000000&#34;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;Note that I will use &amp;lt;&amp;hellip;&amp;gt; as placeholders for awesomeness to come&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://clojuredocs.org/clojure.core/with-open&#34;&gt;with-open&lt;/a&gt; will open the file and surround it as well as the body of the function in a try-catch for us, as well as &lt;em&gt;close&lt;/em&gt; the file when we are finished the body of the function!&lt;/p&gt;

&lt;h3 id=&#34;step-6-let-s-bind-a-file-to-something-short-and-sweet&#34;&gt;Step 6. Let&amp;rsquo;s Bind a File to Something Short and Sweet&lt;/h3&gt;

&lt;p&gt;In Clojure we don&amp;rsquo;t assign values to variables, we are too cool for that now. Instead, we &lt;em&gt;bind&lt;/em&gt; values to &lt;em&gt;symbols&lt;/em&gt;. The &lt;code&gt;[ ]&lt;/code&gt; that we had beside the &lt;code&gt;with-open&lt;/code&gt;, is what holds our bindings, which in this case will be a single symbol and value to be bound to it.&lt;/p&gt;

&lt;p&gt;We are going to use the &lt;a href=&#34;https://clojuredocs.org/clojure.java.io/reader&#34;&gt;reader&lt;/a&gt; function within the io library which takes a single argument&amp;ndash;the file path/name&amp;ndash;and bind it to something short like &lt;code&gt;r&lt;/code&gt; for reader.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;use&lt;/span&gt; &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;#39;clojure.java.io&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #204a87&#34;&gt;with-open &lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;reader&lt;/span&gt; &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;csci3055u-a1.txt&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)]&lt;/span&gt;
    &lt;span style=&#34;color: #000000&#34;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;step-7-read-print&#34;&gt;Step 7. Read &amp;amp; Print&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s just jump ahead a bunch of steps and start printing &lt;em&gt;something&lt;/em&gt;! We are going to use the &lt;code&gt;println&lt;/code&gt; function to print something that we read from the reader &lt;code&gt;r&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In read_file.clj:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;use&lt;/span&gt; &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;#39;clojure.java.io&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #204a87&#34;&gt;with-open &lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;reader&lt;/span&gt; &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;csci3055u-a1.txt&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)]&lt;/span&gt;
	&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #204a87&#34;&gt;println &lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;.read&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;java -cp clojure-1.8.0.jar clojure.main read_file.clj
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;50
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;No errors! But let&amp;rsquo;s just double check what&amp;rsquo;s going on. The first line of the text file you have is actually :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;201609|Foun.of Ditgl Teach &amp;amp; Lrn Tech|AEDT 1120U|12|M|10|13|0|Virtual ONLINE11
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Where did the 50 come from? Turns out we read in a char, and printed the raw value of it rather than the char it represents. Let&amp;rsquo;s fix that by telling the println to print the char that we read in.&lt;/p&gt;

&lt;p&gt;In read_file.clj:
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;use&lt;/span&gt; &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;#39;clojure.java.io&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #204a87&#34;&gt;with-open &lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;reader&lt;/span&gt; &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;csci3055u-a1.txt&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)]&lt;/span&gt;
	&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #204a87&#34;&gt;println &lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #204a87&#34;&gt;char &lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;.read&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;))))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;In terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;java -cp clojure-1.8.0.jar clojure.main read_file.clj
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Success! We have read something in from the file and printed it to the console!&lt;/p&gt;

&lt;h3 id=&#34;step-8-keep-reading-till-the-end&#34;&gt;Step 8. Keep Reading Till the End&lt;/h3&gt;

&lt;p&gt;We want to read-print-read-print&amp;hellip;, so in other words we need to repeat a set of instructions. I&amp;rsquo;m sure you are all familiar with &lt;em&gt;for&lt;/em&gt; loops and &lt;em&gt;while&lt;/em&gt; loops, but again I will say that we are too cool for that now, because in Clojure we use recursion to loop over things!&lt;/p&gt;

&lt;p&gt;In this next snippet, I had to refactor some things. The value read in by &lt;code&gt;.read r&lt;/code&gt; is now bound to the symbol &lt;code&gt;c&lt;/code&gt; during the initialization of the &lt;a href=&#34;https://clojuredocs.org/clojure.core/loop&#34;&gt;loop&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We check to see if &lt;code&gt;c&lt;/code&gt; is anything but the end of the file (which is represented by &lt;code&gt;-1&lt;/code&gt;). This &lt;code&gt;if&lt;/code&gt; statement will actually become our stopping condition for the loop.&lt;/p&gt;

&lt;p&gt;Since we want to do two instructions concurrently we need to wrap the two statements in a &lt;a href=&#34;https://clojuredocs.org/clojure.core/do&#34;&gt;do&lt;/a&gt; function which allows us to evaluate the statements in order.&lt;/p&gt;

&lt;p&gt;The first statement in our &lt;a href=&#34;https://clojuredocs.org/clojure.core/do&#34;&gt;do&lt;/a&gt; function prints the character that the &lt;code&gt;c&lt;/code&gt; symbol represents. The second statement has the &lt;a href=&#34;https://clojuredocs.org/clojure.core/loop&#34;&gt;recur&lt;/a&gt; function which actually returns us to the beginning of our &lt;a href=&#34;https://clojuredocs.org/clojure.core/loop&#34;&gt;loop&lt;/a&gt;, passing along the new value to be assigned to &lt;code&gt;c&lt;/code&gt;. The value that we pass along is the next character read in from our reader &lt;code&gt;r&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In read_file.clj:
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;use&lt;/span&gt; &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;#39;clojure.java.io&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #204a87&#34;&gt;with-open &lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;reader&lt;/span&gt; &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;csci3055u-a1.txt&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)]&lt;/span&gt;
    &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;loop &lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;.read&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)]&lt;/span&gt; 
    	&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;if &lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #204a87&#34;&gt;not= &lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color: #0000cf; font-weight: bold&#34;&gt;-1&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;
    	   &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;do&lt;/span&gt;
    	       &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #204a87&#34;&gt;print &lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #204a87&#34;&gt;char &lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;))&lt;/span&gt;
    	       &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;recur&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;.read&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;))))))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;In terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;java -cp clojure-1.8.0.jar clojure.main read_file.clj
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We have  now printed the entire file to the console, but in the worst possible way! So don&amp;rsquo;t hand anything like this in.&lt;/p&gt;

&lt;h3 id=&#34;step-9-do-better-with-sequences&#34;&gt;Step 9. Do Better With Sequences&lt;/h3&gt;

&lt;p&gt;Sequences are powerful! Essentially, they let us take one item from a list/vector/array like collection without worrying about how big the collection it came from. We just deal with the items one at a time, and it is glorious and fast!&lt;/p&gt;

&lt;p&gt;In the next snippet, the reader &lt;code&gt;r&lt;/code&gt; is now going to become the input to the &lt;a href=&#34;https://clojuredocs.org/clojure.core/line-seq&#34;&gt;line-seq&lt;/a&gt;, which as you can guess is a &lt;em&gt;sequence of lines&lt;/em&gt; (isn&amp;rsquo;t that exactly what a text file is anyway?).&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;https://clojuredocs.org/clojure.core/doseq&#34;&gt;doseq&lt;/a&gt; is similar to a &amp;lsquo;for each&amp;rsquo; loop in other languages. To really hammer this home, what this statement is saying is that we want to &amp;lsquo;do the body of the loop, to every line in the line sequence &lt;code&gt;ls&lt;/code&gt;&amp;lsquo;&lt;/p&gt;

&lt;p&gt;In read_file.clj:
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;use&lt;/span&gt; &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;#39;clojure.java.io&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #204a87&#34;&gt;with-open &lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;reader&lt;/span&gt; &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;csci3055u-a1.txt&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)]&lt;/span&gt;
	&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #204a87&#34;&gt;doseq &lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;ls&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #204a87&#34;&gt;line-seq &lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)]&lt;/span&gt;
		&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #204a87&#34;&gt;println &lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;ls&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;moving-forward&#34;&gt;Moving Forward&lt;/h2&gt;

&lt;p&gt;Want to see how we can extract specific values from the lines we read in? Head on over to the post on &lt;a href=&#34;https://adelehedrick.github.io/Fall-2016-CSCI-3055U/blog/2016/09/21/split-clojure/&#34;&gt;doing the splits in Clojure&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Doing the Splits in Clojure</title>
      <link>https://adelehedrick.github.io/Fall-2016-CSCI-3055U/blog/2016/09/21/split-clojure/</link>
      <pubDate>Wed, 21 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://adelehedrick.github.io/Fall-2016-CSCI-3055U/blog/2016/09/21/split-clojure/</guid>
      <description>

&lt;h2 id=&#34;before-we-begin&#34;&gt;Before We Begin&lt;/h2&gt;

&lt;p&gt;This is going to be a quick tutorial about the &lt;a href=&#34;https://clojuredocs.org/clojure.string/split&#34;&gt;split&lt;/a&gt; function in Clojure.&lt;/p&gt;

&lt;p&gt;You will need to have a REPL up and running. If you forgot how to do that visit &lt;a href=&#34;https://adelehedrick.github.io/Fall-2016-CSCI-3055U/blog/2016/09/19/first-clojure-repl/&#34;&gt;this post&lt;/a&gt;. I will tell you exactly when to enter statements into the REPL, and those statements will be preceded by the &lt;code&gt;user=&amp;gt;&lt;/code&gt; prompt.&lt;/p&gt;

&lt;h3 id=&#34;load-the-split&#34;&gt;Load the Split&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;user=&amp;gt; (use &#39;[clojure.string :only (split)])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nil
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using this doesn&amp;rsquo;t return a value, so we get a nil.&lt;/p&gt;

&lt;h3 id=&#34;let-s-be-friends&#34;&gt;Let&amp;rsquo;s Be Friends&lt;/h3&gt;

&lt;p&gt;I am going to start off by using a &lt;a href=&#34;https://clojuredocs.org/clojure.core/let&#34;&gt;let&lt;/a&gt; special form to bind some values to symbols in a cozy local scope. Please note that &lt;code&gt;&amp;lt;...&amp;gt;&lt;/code&gt; are placeholders.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;let &lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&amp;lt;symbols&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;values&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;]&lt;/span&gt;
    &lt;span style=&#34;color: #000000&#34;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;a href=&#34;https://clojuredocs.org/clojure.string/split&#34;&gt;split&lt;/a&gt; function that I will be demoing, has two required arguments, and a third optional argument. Respectively they are; the string you are splitting, the regular expression you are using to split with, and the optional limit.&lt;/p&gt;

&lt;p&gt;So let&amp;rsquo;s create the symbol &lt;code&gt;s&lt;/code&gt; for the string &amp;lsquo;I like pumpkin spice lattes and am proud of it&amp;rsquo;, and the symbol &lt;code&gt;re&lt;/code&gt; for the regular expression of a space.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;let &lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;I like pumpkin spice lattes and am proud of it&amp;quot;&lt;/span&gt;
      &lt;span style=&#34;color: #000000&#34;&gt;re&lt;/span&gt; &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;\s&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;]&lt;/span&gt;
    &lt;span style=&#34;color: #000000&#34;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id=&#34;going-on-a-hashtag-tangent&#34;&gt;Going on a Hashtag Tangent&lt;/h4&gt;

&lt;p&gt;Some of you may be wondering what is going on with the # in front of the string containing our regular expression for a space. To address your wondering, it is a reader macro that will make the pattern within the quotes be compiled at read-time. See more in the &lt;a href=&#34;http://clojure.org/reference/other_functions&#34;&gt;docs&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;split&#34;&gt;Split!&lt;/h3&gt;

&lt;p&gt;Time to replace the body placeholder with the &lt;a href=&#34;https://clojuredocs.org/clojure.string/split&#34;&gt;split&lt;/a&gt; function.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;let &lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;I like pumpkin spice lattes and am proud of it&amp;quot;&lt;/span&gt;
      &lt;span style=&#34;color: #000000&#34;&gt;re&lt;/span&gt; &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;\s&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;]&lt;/span&gt;
    &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;split&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;re&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;user=&amp;gt; (let [s &amp;quot;I like pumpkin spice lattes and am proud of it&amp;quot; re #&amp;quot;\s&amp;quot;](split s re))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[&amp;quot;I&amp;quot; &amp;quot;like&amp;quot; &amp;quot;pumpkin&amp;quot; &amp;quot;spice&amp;quot; &amp;quot;lattes&amp;quot; &amp;quot;and&amp;quot; &amp;quot;am&amp;quot; &amp;quot;proud&amp;quot; &amp;quot;of&amp;quot; &amp;quot;it&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You now have a vector of strings!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Your First Clojure REPL</title>
      <link>https://adelehedrick.github.io/Fall-2016-CSCI-3055U/blog/2016/09/19/first-clojure-repl/</link>
      <pubDate>Mon, 19 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://adelehedrick.github.io/Fall-2016-CSCI-3055U/blog/2016/09/19/first-clojure-repl/</guid>
      <description>

&lt;h2 id=&#34;before-we-begin&#34;&gt;Before We Begin&lt;/h2&gt;

&lt;p&gt;Do you have the Clojure JAR? If not check out the &lt;a href=&#34;https://adelehedrick.github.io/Fall-2016-CSCI-3055U/blog/2016/09/18/getting-started-clojure/&#34;&gt;Setting Up Clojure&lt;/a&gt; post&lt;/p&gt;

&lt;h2 id=&#34;your-first-clojure-repl&#34;&gt;Your First Clojure REPL&lt;/h2&gt;

&lt;p&gt;I like to think of the read-eval-print loop (REPL) as the &lt;em&gt;interactive programming&lt;/em&gt; mode of a language.&lt;/p&gt;

&lt;h3 id=&#34;step-1-find-your-clojure-jar&#34;&gt;Step 1. Find your Clojure JAR&lt;/h3&gt;

&lt;p&gt;First open a terminal window and navigate to where your Clojure JAR is located.&lt;/p&gt;

&lt;h3 id=&#34;step-2-run-the-main-method&#34;&gt;Step 2. Run the main method!&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;java -cp clojure-1.8.0.jar clojure.main
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You will now see that you have a new prompt that looks like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;user=&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You are now ready to get your Clojure on! When starting a new language, it is good luck to do the typical &amp;ldquo;Hello World&amp;rdquo;. To do this, we will use the &lt;code&gt;println&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;Type the following Clojure command to bring yourself lots of good luck with Clojure:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(println &amp;quot;Hello World&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To leave the REPL, you just need to use &lt;code&gt;CTRL + D&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Your First Leiningen REPL</title>
      <link>https://adelehedrick.github.io/Fall-2016-CSCI-3055U/blog/2016/09/19/first-lein-repl/</link>
      <pubDate>Mon, 19 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://adelehedrick.github.io/Fall-2016-CSCI-3055U/blog/2016/09/19/first-lein-repl/</guid>
      <description>

&lt;h2 id=&#34;before-we-begin&#34;&gt;Before We Begin&lt;/h2&gt;

&lt;p&gt;Have you installed Leiningen? It is a requirement of running the lein repl! If you have no idea what I am saying you can head on over to the &lt;a href=&#34;https://adelehedrick.github.io/Fall-2016-CSCI-3055U/blog/2016/09/18/setting-up-lein/&#34;&gt;Setting Up Leiningen&lt;/a&gt; post&lt;/p&gt;

&lt;h2 id=&#34;your-first-lein-repl&#34;&gt;Your First lein REPL&lt;/h2&gt;

&lt;p&gt;I like to think of the read-eval-print loop (REPL) as the &lt;em&gt;interactive programming&lt;/em&gt; mode of a language. The first time you create a REPL through lein, it will download any extra files it needs.&lt;/p&gt;

&lt;p&gt;Open up one now in your terminal window with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;lein repl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You will now see that you have a new prompt that looks like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;user=&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You are now ready to get your Clojure on! When starting a new language, it is good luck to do the typical &amp;ldquo;Hello World&amp;rdquo;. To do this, we will use the &lt;code&gt;println&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;Type the following Clojure command to bring yourself lots of good luck with Clojure:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(println &amp;quot;Hello World&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To leave the REPL, you just need to use &lt;code&gt;CTRL + D&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Getting Started with Clojure</title>
      <link>https://adelehedrick.github.io/Fall-2016-CSCI-3055U/blog/2016/09/18/getting-started-clojure/</link>
      <pubDate>Sun, 18 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://adelehedrick.github.io/Fall-2016-CSCI-3055U/blog/2016/09/18/getting-started-clojure/</guid>
      <description>

&lt;h2 id=&#34;before-we-begin&#34;&gt;Before We Begin&lt;/h2&gt;

&lt;p&gt;This guide will be for setting up your environment in a Linux OS, I&amp;rsquo;m currently using Ubuntu. You will need Java version 1.6 or later, which is recommended by everything that I have read so far.&lt;/p&gt;

&lt;p&gt;To check your Java version just open up a terminal and type:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;java -version
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you are probably thinking &amp;ldquo;why do we need Java? I thought we are programming in Clojure?&amp;rdquo; To answer your unasked question, the Clojure code you write will be compiled by the Clojure &lt;em&gt;compiler&lt;/em&gt; to create Java Virtual Machine (JVM) bytecode. The Clojure compiler&amp;ndash;that we will get to later on&amp;ndash;is actually an executable JAR file, hence the need for Java.&lt;/p&gt;

&lt;h2 id=&#34;get-clojure-up-running&#34;&gt;Get Clojure Up &amp;amp; Running&lt;/h2&gt;

&lt;h3 id=&#34;step-1-download-clojure-zip&#34;&gt;Step 1. Download Clojure Zip&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s start off by opening up a terminal, and navigating to a location you want the JAR. Once there use the &lt;code&gt;wget&lt;/code&gt; command to download the zip folder:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wget http://repo1.maven.org/maven2/org/clojure/clojure/1.8.0/clojure-1.8.0.zip
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;step-2-unzip&#34;&gt;Step 2. Unzip&lt;/h3&gt;

&lt;p&gt;Unzip the folder to current directory.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;unzip clojure-1.8.0.zip
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;step-3-move-the-jar-into-the-current-directory&#34;&gt;Step 3. Move the JAR into the Current Directory&lt;/h3&gt;

&lt;p&gt;If you enter &lt;code&gt;ls&lt;/code&gt; you will find your new &amp;lsquo;clojure-1.8.0&amp;rsquo; folder, and inside it is the &amp;lsquo;clojure-1.8.0.jar&amp;rsquo; that we want. Let&amp;rsquo;s pull that JAR out of its directory and bring it into the current directory.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mv clojure-1.8.0/clojure-1.8.0.jar ./
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;step-4-test-with-a-repl&#34;&gt;Step 4. Test with a REPL&lt;/h3&gt;

&lt;p&gt;I go into more detail about the REPL in this &lt;a href=&#34;https://adelehedrick.github.io/Fall-2016-CSCI-3055U/blog/2016/09/19/first-clojure-repl/&#34;&gt;post&lt;/a&gt;, but for now just do these short steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Enter &lt;code&gt;java -cp clojure-1.8.0.jar clojure.main&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;You are now in the Clojure REPL. Try &lt;code&gt;(+ 1 3)&lt;/code&gt; and see if you get 4&lt;/li&gt;
&lt;li&gt;Exit out of the REPL by typing &lt;code&gt;CTRL + D&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;step-4-run-a-clojure-script&#34;&gt;Step 4. Run a Clojure Script&lt;/h3&gt;

&lt;p&gt;REPLs are nice, but but what if you want to code offline and then run it? Let&amp;rsquo;s quickly do that!&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Still in the same terminal window create a new Clojure file with &lt;code&gt;gedit hello.clj&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;In the file enter &lt;code&gt;(println &amp;quot;Hello World!&amp;quot;)&lt;/code&gt; then save and close the file&lt;/li&gt;
&lt;li&gt;Back in your terminal window you are going to run the same command as you did to start the Clojure REPL, but now you are going to provide it with a command line argument of the file name of the script you just wrote: &lt;code&gt;java -cp clojure-1.8.0.jar clojure.main hello.clj&lt;/code&gt;. If you didn&amp;rsquo;t get the expected output of &lt;code&gt;Hello World!&lt;/code&gt; then something went wrong!&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;step-5-break-the-script&#34;&gt;Step 5. Break the Script&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s take a quick look at what happens when there is a bug in your Clojure code. Being able to read/write code is very important, but so is being able to read &lt;em&gt;errors&lt;/em&gt;!&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open up the hello.clj again with &lt;code&gt;gedit hello.clj&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Change &lt;code&gt;println&lt;/code&gt; to something else (e.g. &lt;code&gt;printlny&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Now run the script again! &lt;code&gt;java -cp clojure-1.8.0.jar clojure.main hello.clj&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Errors!!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Exception in thread &amp;quot;main&amp;quot; java.lang.RuntimeException: Unable to resolve symbol: printlny in this context, compiling:(/home/delio/clojure_play/hello.clj:1:1)
    at clojure.lang.Compiler.analyze(Compiler.java:6688)
    at clojure.lang.Compiler.analyze(Compiler.java:6625)
    at clojure.lang.Compiler$InvokeExpr.parse(Compiler.java:3766)
    at clojure.lang.Compiler.analyzeSeq(Compiler.java:6870)
    at clojure.lang.Compiler.analyze(Compiler.java:6669)
    at clojure.lang.Compiler.analyze(Compiler.java:6625)
    at clojure.lang.Compiler$BodyExpr$Parser.parse(Compiler.java:6001)
    at clojure.lang.Compiler$FnMethod.parse(Compiler.java:5380)
    at clojure.lang.Compiler$FnExpr.parse(Compiler.java:3972)
    at clojure.lang.Compiler.analyzeSeq(Compiler.java:6866)
    at clojure.lang.Compiler.analyze(Compiler.java:6669)
    at clojure.lang.Compiler.eval(Compiler.java:6924)
    at clojure.lang.Compiler.load(Compiler.java:7379)
    at clojure.lang.Compiler.loadFile(Compiler.java:7317)
    at clojure.main$load_script.invokeStatic(main.clj:275)
    at clojure.main$script_opt.invokeStatic(main.clj:335)
    at clojure.main$script_opt.invoke(main.clj:330)
    at clojure.main$main.invokeStatic(main.clj:421)
    at clojure.main$main.doInvoke(main.clj:384)
    at clojure.lang.RestFn.invoke(RestFn.java:408)
    at clojure.lang.Var.invoke(Var.java:379)
    at clojure.lang.AFn.applyToHelper(AFn.java:154)
    at clojure.lang.Var.applyTo(Var.java:700)
    at clojure.main.main(main.java:37)
Caused by: java.lang.RuntimeException: Unable to resolve symbol: printlny in this context
    at clojure.lang.Util.runtimeException(Util.java:221)
    at clojure.lang.Compiler.resolveIn(Compiler.java:7164)
    at clojure.lang.Compiler.resolve(Compiler.java:7108)
    at clojure.lang.Compiler.analyzeSymbol(Compiler.java:7069)
    at clojure.lang.Compiler.analyze(Compiler.java:6648)
    ... 23 more
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is an epic output! This stack trace shows you exactly where in the Clojure compiler JAR everything broke down, but most importantly it tells you where in your Clojure script it broke!&lt;/p&gt;

&lt;p&gt;Look at the first line a little more closely:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Exception in thread &amp;quot;main&amp;quot; java.lang.RuntimeException: Unable to resolve symbol: printlny in this context, compiling:(/home/delio/clojure_play/hello.clj:1:1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This tells me a lot! &lt;code&gt;Unable to resolve symbol: printly&lt;/code&gt; tells me that the compiler encountered  something&amp;ndash;in this case &amp;lsquo;printly&amp;rsquo;&amp;ndash;that is completely unknown, and therefore it can&amp;rsquo;t be translated to JVM bytecode! The error then tells me where it encountered the problem by showing the file name, line number and column; &lt;code&gt;(/home/delio/clojure_play/hello.clj:1:1)&lt;/code&gt;. Just to be clear, the first &amp;lsquo;1&amp;rsquo; is the line number, and the second is the column number.&lt;/p&gt;

&lt;h2 id=&#34;moving-forward&#34;&gt;Moving Forward&lt;/h2&gt;

&lt;p&gt;Ready for more? Why don&amp;rsquo;t you head over to the &lt;a href=&#34;https://adelehedrick.github.io/Fall-2016-CSCI-3055U/blog/2016/09/21/little-input-clojure/&#34;&gt;post on file input in Clojure&lt;/a&gt;!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Learn Clojure</title>
      <link>https://adelehedrick.github.io/Fall-2016-CSCI-3055U/clojure/</link>
      <pubDate>Sun, 18 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://adelehedrick.github.io/Fall-2016-CSCI-3055U/clojure/</guid>
      <description>

&lt;h2 id=&#34;tutorials&#34;&gt;Tutorials&lt;/h2&gt;

&lt;p&gt;Let me help you through the wonderful world of the Lisp like language &lt;em&gt;Clojure&lt;/em&gt; by providing you&amp;ndash;in order&amp;ndash;the blog posts dedicated to the topic.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://adelehedrick.github.io/Fall-2016-CSCI-3055U/blog/2016/09/18/getting-started-clojure/&#34;&gt;Getting Started with Clojure&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;How to download and use the clojure.jar&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://adelehedrick.github.io/Fall-2016-CSCI-3055U/blog/2016/09/21/little-input-clojure/&#34;&gt;A Little Input in Clojure&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;How to read text from a file. Also includes if statements and loops.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://adelehedrick.github.io/Fall-2016-CSCI-3055U/blog/2016/09/21/split-clojure/&#34;&gt;Doing the Splits in Clojure&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;How to split a string on a character.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://clojure.org&#34;&gt;Official Clojure website&lt;/a&gt; is always good to have handy.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.braveclojure.com/clojure-for-the-brave-and-true/&#34;&gt;Clojure for the Brave and True&lt;/a&gt; is an amusing book on Clojure. Can be confusing at times, but push on and it will explain everything.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://clojurekoans.com/&#34;&gt;Clojure Koans&lt;/a&gt; are fun little exercises&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Setting Up Leiningen</title>
      <link>https://adelehedrick.github.io/Fall-2016-CSCI-3055U/blog/2016/09/18/setting-up-lein/</link>
      <pubDate>Sun, 18 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://adelehedrick.github.io/Fall-2016-CSCI-3055U/blog/2016/09/18/setting-up-lein/</guid>
      <description>

&lt;h2 id=&#34;before-we-begin&#34;&gt;Before We Begin&lt;/h2&gt;

&lt;p&gt;This guide will be for setting up your environment in a Linux OS, I&amp;rsquo;m currently using Ubuntu. You will need Java version 1.6 or later, which is recommended by everything that I have read so far.&lt;/p&gt;

&lt;p&gt;To check your Java version just open up a terminal and type:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;java -version
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To quote their &lt;a href=&#34;http://leiningen.org/&#34;&gt;website&lt;/a&gt;; Leiningen is &amp;ldquo;for automating Clojure projects without setting your hair on fire.&amp;rdquo; Leiningen will be helping us get Clojure running as well as manage any dependencies we use. Instructions are on their &lt;a href=&#34;http://leiningen.org/&#34;&gt;website&lt;/a&gt; for installing Leiningen, but they are not detailed enough for my liking, so I have made very thorough instructions.&lt;/p&gt;

&lt;h2 id=&#34;install-leiningen&#34;&gt;Install Leiningen&lt;/h2&gt;

&lt;h3 id=&#34;step-1-open-a-terminal-and-download-the-lein-script&#34;&gt;Step 1. Open a terminal and download the lein script&lt;/h3&gt;

&lt;p&gt;Download the script right from the source listed on the Leiningen &lt;a href=&#34;http://leiningen.org/&#34;&gt;website&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wget https://raw.githubusercontent.com/technomancy/leiningen/stable/bin/lein
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;step-2-change-ownership&#34;&gt;Step 2. Change ownership&lt;/h3&gt;

&lt;p&gt;Use chmod to change the &lt;em&gt;ownership&lt;/em&gt; of the lein bash file you just downloaded to allow for anyone to execute the file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;chmod a+x lein
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;step-3-move-lein&#34;&gt;Step 3. Move lein&lt;/h3&gt;

&lt;p&gt;Now move lein&amp;ndash;with super user privileges&amp;ndash;to your system&amp;rsquo;s executable path.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo mv lein /usr/bin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you are prompted to enter your password, do so and carry on.&lt;/p&gt;

&lt;h3 id=&#34;step-4-run-it&#34;&gt;Step 4. Run it&lt;/h3&gt;

&lt;p&gt;Now you will simply run &lt;em&gt;lein&lt;/em&gt; and it will download the self-install package. If you try to run lein without super user privileges, it might yell at you about firewall junk. Be sure to press &lt;code&gt;ENTER&lt;/code&gt; when it asks you to confirm this action.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo lein
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;step-5-confirm-all-is-well&#34;&gt;Step 5. Confirm all is well&lt;/h3&gt;

&lt;p&gt;Just to make sure everything is good, let&amp;rsquo;s check the version of lein.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;lein -v
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You should receive an output similar to mine below (depending on your Java version).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; Leiningen 2.7.0 on Java 1.7.0_80 Java HotSpot(TM) 64-Bit Server VM
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;next-steps&#34;&gt;Next Steps&lt;/h2&gt;

&lt;p&gt;Now that you have Leiningen installed and the Clojure compiler downloaded, why don&amp;rsquo;t you start &lt;a href=&#34;https://adelehedrick.github.io/Fall-2016-CSCI-3055U/blog/2016/09/19/first-lein-repl/&#34;&gt;your first Leiningen REPL&lt;/a&gt;?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>About Hugo</title>
      <link>https://adelehedrick.github.io/Fall-2016-CSCI-3055U/about/</link>
      <pubDate>Wed, 09 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://adelehedrick.github.io/Fall-2016-CSCI-3055U/about/</guid>
      <description>

&lt;p&gt;Hugo is a static site engine written in Go.&lt;/p&gt;

&lt;p&gt;It makes use of a variety of open source projects including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/cobra&#34;&gt;Cobra&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/viper&#34;&gt;Viper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/jWalterWeatherman&#34;&gt;J Walter Weatherman&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/cast&#34;&gt;Cast&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Learn more and contribute on &lt;a href=&#34;https://github.com/spf13&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;setup&#34;&gt;Setup&lt;/h2&gt;

&lt;p&gt;Some fun facts about &lt;a href=&#34;http://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Built in &lt;a href=&#34;http://golang.org/&#34;&gt;Go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Loosely inspired by &lt;a href=&#34;http://jekyllrb.com/&#34;&gt;Jekyll&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Primarily developed by &lt;a href=&#34;http://spf13.com/&#34;&gt;spf13&lt;/a&gt; on the train while commuting to and from Manhattan.&lt;/li&gt;
&lt;li&gt;Coded in &lt;a href=&#34;http://vim.org&#34;&gt;Vim&lt;/a&gt; using &lt;a href=&#34;http://vim.spf13.com/&#34;&gt;spf13-vim&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Have questions or suggestions? Feel free to &lt;a href=&#34;https://github.com/spf13/hugo/issues/new&#34;&gt;open an issue on GitHub&lt;/a&gt; or &lt;a href=&#34;https://twitter.com/spf13&#34;&gt;ask me on Twitter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Contact</title>
      <link>https://adelehedrick.github.io/Fall-2016-CSCI-3055U/contact/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://adelehedrick.github.io/Fall-2016-CSCI-3055U/contact/</guid>
      <description>

&lt;h1 id=&#34;i-am-here-to-help-you&#34;&gt;I am here to help you&lt;/h1&gt;

&lt;p&gt;For in-person help, come to my office hour currently scheduled for Tuesdays at 10am in the TA office (UA4029).&lt;/p&gt;

&lt;p&gt;Other than that feel free to email me, post to the Google Community for this course, or message me through Google Hangouts. When using the Google Community or Hangouts make sure you are logged in with your UOIT.net account!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>